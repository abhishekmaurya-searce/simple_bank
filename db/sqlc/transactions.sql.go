// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: transactions.sql

package db

import (
	"context"
)

const createTransactions = `-- name: CreateTransactions :one
INSERT INTO Transactions (
  to_account,
  from_account,
  amount
) VALUES (
  $1, $2, $3
) RETURNING id, to_account, from_account, amount, created_at
`

type CreateTransactionsParams struct {
	ToAccount   int64 `json:"to_account"`
	FromAccount int64 `json:"from_account"`
	Amount      int64 `json:"amount"`
}

func (q *Queries) CreateTransactions(ctx context.Context, arg CreateTransactionsParams) (Transactions, error) {
	row := q.db.QueryRowContext(ctx, createTransactions, arg.ToAccount, arg.FromAccount, arg.Amount)
	var i Transactions
	err := row.Scan(
		&i.ID,
		&i.ToAccount,
		&i.FromAccount,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransactions = `-- name: DeleteTransactions :exec
DELETE FROM Transactions 
WHERE id=$1
`

func (q *Queries) DeleteTransactions(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransactions, id)
	return err
}

const getTransactions = `-- name: GetTransactions :one
SELECT id, to_account, from_account, amount, created_at FROM Transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransactions(ctx context.Context, id int64) (Transactions, error) {
	row := q.db.QueryRowContext(ctx, getTransactions, id)
	var i Transactions
	err := row.Scan(
		&i.ID,
		&i.ToAccount,
		&i.FromAccount,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, to_account, from_account, amount, created_at FROM Transactions
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTransactionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]Transactions, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transactions
	for rows.Next() {
		var i Transactions
		if err := rows.Scan(
			&i.ID,
			&i.ToAccount,
			&i.FromAccount,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
